{"ast":null,"code":"var _jsxFileName = \"/home/ben/Documents/ChatPulse/frontend/src/components/Chat.js\",\n  _s = $RefreshSig$();\n// src/components/Chat.js\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { io } from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(true); // Replace with actual authentication check logic\n  const [username, setUsername] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState('');\n  const [socket, setSocket] = useState(null);\n  const navigate = useNavigate();\n  useEffect(() => {\n    // Check authentication status\n    if (!isAuthenticated) {\n      navigate('/login');\n    }\n  }, [isAuthenticated, navigate]);\n  useEffect(() => {\n    // Retrieve username from localStorage after login/registration\n    const storedUsername = localStorage.getItem('username');\n    if (storedUsername) {\n      setUsername(storedUsername);\n    }\n\n    // Establish the socket connection for real-time chat\n    const newSocket = io('http://localhost:5000');\n    setSocket(newSocket);\n\n    // Listen for incoming messages\n    newSocket.on('message', message => {\n      setMessages(prevMessages => [...prevMessages, message]);\n    });\n\n    // Cleanup: Disconnect socket on component unmount\n    return () => {\n      newSocket.disconnect();\n    };\n  }, []);\n  const sendMessage = () => {\n    if (socket) {\n      socket.emit('message', message);\n      setMessage(''); // Clear input after sending\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [username && /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Welcome, \", username, \"! You are now in the chat space.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 20\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n        children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: msg\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: message,\n        onChange: e => setMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"uxO2eQkY7H6NdgqJOkqrJTyVtQ8=\", false, function () {\n  return [useNavigate];\n});\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","io","jsxDEV","_jsxDEV","Chat","_s","isAuthenticated","setIsAuthenticated","username","setUsername","messages","setMessages","message","setMessage","socket","setSocket","navigate","storedUsername","localStorage","getItem","newSocket","on","prevMessages","disconnect","sendMessage","emit","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","type","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/home/ben/Documents/ChatPulse/frontend/src/components/Chat.js"],"sourcesContent":["// src/components/Chat.js\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { io } from 'socket.io-client';\n\nconst Chat = () => {\n  const [isAuthenticated, setIsAuthenticated] = useState(true); // Replace with actual authentication check logic\n  const [username, setUsername] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState('');\n  const [socket, setSocket] = useState(null);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    // Check authentication status\n    if (!isAuthenticated) {\n      navigate('/login');\n    }\n  }, [isAuthenticated, navigate]);\n\n  useEffect(() => {\n    // Retrieve username from localStorage after login/registration\n    const storedUsername = localStorage.getItem('username');\n    if (storedUsername) {\n      setUsername(storedUsername);\n    }\n\n    // Establish the socket connection for real-time chat\n    const newSocket = io('http://localhost:5000');\n    setSocket(newSocket);\n\n    // Listen for incoming messages\n    newSocket.on('message', (message) => {\n      setMessages((prevMessages) => [...prevMessages, message]);\n    });\n\n    // Cleanup: Disconnect socket on component unmount\n    return () => {\n      newSocket.disconnect();\n    };\n  }, []);\n\n  const sendMessage = () => {\n    if (socket) {\n      socket.emit('message', message);\n      setMessage(''); // Clear input after sending\n    }\n  };\n\n  return (\n    <div>\n      {/* Welcome message */}\n      {username && <h2>Welcome, {username}! You are now in the chat space.</h2>}\n\n      {/* Real-time chat interface */}\n      <div>\n        <ul>\n          {messages.map((msg, index) => (\n            <li key={index}>{msg}</li>\n          ))}\n        </ul>\n        <input\n          type=\"text\"\n          value={message}\n          onChange={(e) => setMessage(e.target.value)}\n        />\n        <button onClick={sendMessage}>Send</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Chat;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,EAAE,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC9D,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACe,MAAM,EAAEC,SAAS,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAMiB,QAAQ,GAAGhB,WAAW,CAAC,CAAC;EAE9BF,SAAS,CAAC,MAAM;IACd;IACA,IAAI,CAACQ,eAAe,EAAE;MACpBU,QAAQ,CAAC,QAAQ,CAAC;IACpB;EACF,CAAC,EAAE,CAACV,eAAe,EAAEU,QAAQ,CAAC,CAAC;EAE/BlB,SAAS,CAAC,MAAM;IACd;IACA,MAAMmB,cAAc,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACvD,IAAIF,cAAc,EAAE;MAClBR,WAAW,CAACQ,cAAc,CAAC;IAC7B;;IAEA;IACA,MAAMG,SAAS,GAAGnB,EAAE,CAAC,uBAAuB,CAAC;IAC7Cc,SAAS,CAACK,SAAS,CAAC;;IAEpB;IACAA,SAAS,CAACC,EAAE,CAAC,SAAS,EAAGT,OAAO,IAAK;MACnCD,WAAW,CAAEW,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAEV,OAAO,CAAC,CAAC;IAC3D,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACXQ,SAAS,CAACG,UAAU,CAAC,CAAC;IACxB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxB,IAAIV,MAAM,EAAE;MACVA,MAAM,CAACW,IAAI,CAAC,SAAS,EAAEb,OAAO,CAAC;MAC/BC,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;IAClB;EACF,CAAC;EAED,oBACEV,OAAA;IAAAuB,QAAA,GAEGlB,QAAQ,iBAAIL,OAAA;MAAAuB,QAAA,GAAI,WAAS,EAAClB,QAAQ,EAAC,kCAAgC;IAAA;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAGzE3B,OAAA;MAAAuB,QAAA,gBACEvB,OAAA;QAAAuB,QAAA,EACGhB,QAAQ,CAACqB,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBACvB9B,OAAA;UAAAuB,QAAA,EAAiBM;QAAG,GAAXC,KAAK;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAW,CAC1B;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,eACL3B,OAAA;QACE+B,IAAI,EAAC,MAAM;QACXC,KAAK,EAAEvB,OAAQ;QACfwB,QAAQ,EAAGC,CAAC,IAAKxB,UAAU,CAACwB,CAAC,CAACC,MAAM,CAACH,KAAK;MAAE;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7C,CAAC,eACF3B,OAAA;QAAQoC,OAAO,EAAEf,WAAY;QAAAE,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACzB,EAAA,CAjEID,IAAI;EAAA,QAMSJ,WAAW;AAAA;AAAAwC,EAAA,GANxBpC,IAAI;AAmEV,eAAeA,IAAI;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}